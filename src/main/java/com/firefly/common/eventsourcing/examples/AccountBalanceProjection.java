/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.firefly.common.eventsourcing.examples;

import lombok.Builder;
import lombok.Data;
import lombok.extern.jackson.Jacksonized;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.Version;
import org.springframework.data.relational.core.mapping.Column;
import org.springframework.data.relational.core.mapping.Table;

import java.math.BigDecimal;
import java.time.Instant;
import java.util.UUID;

/**
 * Example projection entity for account balance read models.
 * This demonstrates how to create projection entities using Spring Data R2DBC.
 * <p>
 * Constructor is generated by Lombok's @Builder annotation.
 */
@Data
@Builder(toBuilder = true)
@Jacksonized
@Table("account_balance_projections")
public class AccountBalanceProjection {
    
    /**
     * Primary key for the projection.
     */
    @Id
    private final Long id;
    
    /**
     * The account ID this projection represents.
     */
    @Column("account_id")
    private final UUID accountId;
    
    /**
     * Current balance of the account.
     */
    @Column("balance")
    private final BigDecimal balance;
    
    /**
     * Currency of the account.
     */
    @Column("currency")
    private final String currency;
    
    /**
     * When this projection was last updated.
     */
    @Column("last_updated")
    private final Instant lastUpdated;
    
    /**
     * Version for optimistic concurrency control.
     */
    @Version
    @Column("version")
    private final Long version;
}